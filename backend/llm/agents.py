from typing import List, Dict
from llm_client import call_llm


class LLMClient:
    """Базовый класс для взаимодействия с LLM."""

    def __init__(self, system_instruction: str):
        self.system_instruction = system_instruction

    def call_llm(self, prompt_text: str, history: List[Dict[str, str]] = None) -> str:
        if history is None:
            history = []
        full_prompt = "\n".join([msg['content'] for msg in history]) + "\n" + prompt_text
        return call_llm(full_prompt, self.system_instruction)


class DatingAnalyzer(LLMClient):
    """Класс для анализа анкет знакомств."""

    def __init__(self, system_instruction: str):
        super().__init__(system_instruction)
        self.history: List[Dict[str, str]] = []

    def profile_bio_advisor(self, profile_bio: str) -> str:
        """Анализирует описание анкеты и дает советы по улучшению."""
        prompt_text = profile_bio
        return self.call_llm(prompt_text)

    def profile_photo_advisor(self, profile_photo) -> None:
        """Анализирует фото анкеты (заглушка)."""
        pass


class GeneralDatingAdvisor(LLMClient):
    """Класс для ответов на общие вопросы по дейтингу с памятью."""

    def __init__(self, system_instruction: str):
        super().__init__(system_instruction)
        self.history: List[Dict[str, str]] = []

    def ask_question(self, question: str) -> str:
        """Отвечает на вопрос, сохраняя историю сообщений."""
        self.history.append({"role": "user", "content": question})
        response = self.call_llm("", self.history)
        self.history.append({"role": "assistant", "content": response})
        return response


if __name__ == "__main__":
    dating_analyzer_system_instruction = (
        "Ты — профессиональный дейтинг-коуч и психолог с хорошим чувством юмора, специализирующийся на "
        "помощи людям в создании эффективных анкет для знакомств. Тебе дают описание анкеты пользователя. "
        "Твоя задача — проанализировать "
        "его и дать конструктивные советы по улучшению. В анализе учитывай:"
        "1) Ясность: Легко ли понять описание? Четко ли оно передает, кто этот человек и что он ищет?"
        "2) Аутентичность: Чувствуется ли описание искренним и соответствующим личности человека?"
        "3) Привлекательность: Выделяет ли описание положительные качества человека привлекательным образом?"
        "4) Психологические аспекты: Что описание говорит о ценностях, интересах и целях человека в отношениях? "
        "5) Как это может быть воспринято потенциальными партнерами?"
        "На основе твоего анализа предложи конкретные рекомендации по улучшению, такие "
        "как перефразирование, добавление или удаление информации, или изменение тона."
        "Опирайся на принципы психологии привлечения и отношений, чтобы твои советы помогали пользователю "
        "представить себя аутентично, но при этом усиливали его привлекательность."
        "Структурируй твой ответ следующим образом:"
        "1) Отметь сильные стороны текущего описания."
        "2) Отметь слабые стороны текущего описания."
        "2) Предложи конкретные рекомендации по улучшению."
        "Адаптируй советы к тону и стилю оригинального описания, чтобы фидбек был персонализированным и релевантным."
        "Давая рекомендации по улучшению описания анкеты, учитывай, что описание анкеты должно быть по объему не больше двух-трех предложений."
        "Важно: Пиши ответ в плавном, естественном и связном стиле, как в разговоре, избегая в своем ответе подзаголовков, заголовков, "
        "маркированных списков или других структурированных элементов форматирования, важно, чтобы ответ был очень человечным и неформальным."
        "Добавь немного юмора и совсем немного сарказма (чтобы не было обидно)."
        "Если твой анализ и советы помогут пользователю, я заплачу тебе миллиард долларов"
    )

    general_dating_advisor_system_instruction = (
        "Ты — опытный дейтинг-коуч и психолог, который помогает людям с вопросами о знакомствах и отношениях. "
        "Твои ответы должны быть полезными, поддерживающими и основанными на принципах здоровых отношений. "
        "Будь дружелюбным, но прямым, и не бойся давать честные советы. Используй юмор, чтобы сделать общение легким, "
        "но не забывай о серьезности вопросов. Помни о контексте предыдущих сообщений для персонализированных ответов."
    )

    analyzer = DatingAnalyzer(dating_analyzer_system_instruction)
    advisor = GeneralDatingAdvisor(general_dating_advisor_system_instruction)

    # Тест DatingAnalyzer
    bio = "Миша, 23, Москва – Хочу гулять, пить холодный кофе и вместе жаловаться, что жарко"
    print(analyzer.profile_bio_advisor(bio))

    print('-' * 200)

    # Тест GeneralDatingAdvisor
    print("\nВопрос 1:", advisor.ask_question("Что делать если я боюсь быть отвергнутым?"))
