import os
import pytesseract
from PIL import Image
import nltk
from nltk.sentiment.vader import SentimentIntensityAnalyzer
import language_tool_python

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ –±–∏–±–ª–∏–æ—Ç–µ–∫
try:
    import pytesseract
    OCR_AVAILABLE = True
except ImportError:
    OCR_AVAILABLE = False

try:
    from langchain_community.chat_models import GigaChat
    from langchain.schema import HumanMessage
    LLM_AVAILABLE = True
except ImportError:
    LLM_AVAILABLE = False

try:
    import nltk
    from nltk.sentiment.vader import SentimentIntensityAnalyzer
    SENTIMENT_AVAILABLE = True
except ImportError:
    SENTIMENT_AVAILABLE = False

try:
    import language_tool_python
    GRAMMAR_AVAILABLE = True
except ImportError:
    GRAMMAR_AVAILABLE = False

# –†–∞–∑—Ä–µ—à–µ–Ω–Ω—ã–µ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è —Ñ–∞–π–ª–æ–≤
ALLOWED_EXTENSIONS = {'png', 'jpg', 'jpeg', 'gif', 'pdf'}

def allowed_file(filename):
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–∑—Ä–µ—à–µ–Ω–Ω–æ–≥–æ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è —Ñ–∞–π–ª–∞"""
    return '.' in filename and filename.rsplit('.', 1)[1].lower() in ALLOWED_EXTENSIONS

def extract_text_from_image(filepath):
    """–ò–∑–≤–ª–µ—á–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ –∏–∑ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å –ø–æ–º–æ—â—å—é OCR"""
    if not OCR_AVAILABLE:
        return "‚ùå OCR –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ pytesseract: pip install pytesseract"
    
    try:
        # –û—Ç–∫—Ä—ã–≤–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
        image = Image.open(filepath)
        
        # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ RGB –µ—Å–ª–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ
        if image.mode != 'RGB':
            image = image.convert('RGB')
        
        # –ò–∑–≤–ª–µ–∫–∞–µ–º —Ç–µ–∫—Å—Ç
        text = pytesseract.image_to_string(image, lang='rus+eng')
        
        # –û—á–∏—â–∞–µ–º —Ç–µ–∫—Å—Ç
        text = text.strip()
        
        if not text:
            return "–ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–≤–ª–µ—á—å —Ç–µ–∫—Å—Ç –∏–∑ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏–ª–∏ –≤–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –≤—Ä—É—á–Ω—É—é."
        
        return text
        
    except Exception as e:
        return f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–∑–≤–ª–µ—á–µ–Ω–∏–∏ —Ç–µ–∫—Å—Ç–∞: {str(e)}"

def init_nltk():
    """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è NLTK –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ —Ç–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏"""
    if not SENTIMENT_AVAILABLE:
        print("‚ö†Ô∏è NLTK –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω. –ê–Ω–∞–ª–∏–∑ —Ç–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω.")
        return None
    
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö –¥–∞–Ω–Ω—ã—Ö
        try:
            nltk.data.find('vader_lexicon')
        except LookupError:
            print("–ó–∞–≥—Ä—É–∂–∞–µ–º VADER lexicon...")
            nltk.download('vader_lexicon', quiet=True)
        
        # –°–æ–∑–¥–∞–µ–º –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä
        sia = SentimentIntensityAnalyzer()
        print("‚úÖ NLTK –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
        return sia
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ NLTK: {str(e)}")
        return None

def init_gigachat():
    """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è GigaChat"""
    if not LLM_AVAILABLE:
        print("‚ö†Ô∏è LangChain –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω. AI —Ñ—É–Ω–∫—Ü–∏–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã.")
        return None
    
    # –ü–æ–ª—É—á–∞–µ–º API –∫–ª—é—á
    api_key = os.getenv("GIGACHAT_API_KEY")
    
    if not api_key:
        print("‚ö†Ô∏è –ù–µ –Ω–∞–π–¥–µ–Ω GIGACHAT_API_KEY. –î–æ–±–∞–≤—å—Ç–µ –µ–≥–æ –≤ .env —Ñ–∞–π–ª.")
        print("‚ÑπÔ∏è –†–∞–±–æ—Ç–∞–µ–º –≤ –¥–µ–º–æ-—Ä–µ–∂–∏–º–µ –±–µ–∑ AI")
        return None
    
    try:
        # –°–æ–∑–¥–∞–µ–º –∫–ª–∏–µ–Ω—Ç GigaChat
        llm = GigaChat(
            credentials=api_key,
            model="GigaChat-Max",
            temperature=0.7,
            verify_ssl_certs=False
        )
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ
        test_response = llm.invoke([HumanMessage(content="–¢–µ—Å—Ç")])
        print("‚úÖ GigaChat –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
        return llm
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ GigaChat: {str(e)}")
        print("‚ÑπÔ∏è –†–∞–±–æ—Ç–∞–µ–º –≤ –¥–µ–º–æ-—Ä–µ–∂–∏–º–µ –±–µ–∑ AI")
        return None

def check_grammar(text):
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –≥—Ä–∞–º–º–∞—Ç–∏–∫–∏ —Ç–µ–∫—Å—Ç–∞"""
    if not GRAMMAR_AVAILABLE:
        return {
            'success': False,
            'error': 'language_tool_python –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ: pip install language-tool-python'
        }
    
    try:
        # –°–æ–∑–¥–∞–µ–º –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
        tool = language_tool_python.LanguageTool('ru')
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–µ–∫—Å—Ç
        matches = tool.check(text)
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        corrections = []
        for match in matches:
            corrections.append({
                'message': match.message,
                'replacements': match.replacements[:3],  # –ü–µ—Ä–≤—ã–µ 3 –≤–∞—Ä–∏–∞–Ω—Ç–∞
                'offset': match.offset,
                'length': match.errorLength,
                'rule': match.ruleId
            })
        
        # –ó–∞–∫—Ä—ã–≤–∞–µ–º –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç
        tool.close()
        
        return {
            'success': True,
            'corrections': corrections,
            'total': len(corrections)
        }
        
    except Exception as e:
        return {
            'success': False,
            'error': f'–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏: {str(e)}'
        }

def format_message_time(timestamp):
    """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏ —Å–æ–æ–±—â–µ–Ω–∏—è"""
    from datetime import datetime
    
    try:
        # –ï—Å–ª–∏ timestamp —É–∂–µ datetime –æ–±—ä–µ–∫—Ç
        if isinstance(timestamp, datetime):
            dt = timestamp
        else:
            # –ü—Ä–æ–±—É–µ–º —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å —Å—Ç—Ä–æ–∫—É
            dt = datetime.fromisoformat(str(timestamp))
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ñ–æ—Ä–º–∞—Ç –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –¥–∞–≤–Ω–æ—Å—Ç–∏
        now = datetime.utcnow()
        diff = now - dt
        
        if diff.days == 0:
            # –°–µ–≥–æ–¥–Ω—è - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –≤—Ä–µ–º—è
            return dt.strftime("%H:%M")
        elif diff.days == 1:
            # –í—á–µ—Ä–∞
            return f"–í—á–µ—Ä–∞ –≤ {dt.strftime('%H:%M')}"
        elif diff.days < 7:
            # –ù–∞ —ç—Ç–æ–π –Ω–µ–¥–µ–ª–µ - –¥–µ–Ω—å –Ω–µ–¥–µ–ª–∏
            days = ['–ü–Ω', '–í—Ç', '–°—Ä', '–ß—Ç', '–ü—Ç', '–°–±', '–í—Å']
            return f"{days[dt.weekday()]} –≤ {dt.strftime('%H:%M')}"
        else:
            # –ë–æ–ª—å—à–µ –Ω–µ–¥–µ–ª–∏ - –ø–æ–ª–Ω–∞—è –¥–∞—Ç–∞
            return dt.strftime("%d.%m.%Y %H:%M")
            
    except Exception as e:
        return str(timestamp)

def sanitize_html(text):
    """–û—á–∏—Å—Ç–∫–∞ —Ç–µ–∫—Å—Ç–∞ –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ–≥–æ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ HTML"""
    import html
    
    if not text:
        return ""
    
    # –≠–∫—Ä–∞–Ω–∏—Ä—É–µ–º HTML —Å–∏–º–≤–æ–ª—ã
    text = html.escape(text)
    
    # –ó–∞–º–µ–Ω—è–µ–º –ø–µ—Ä–µ–Ω–æ—Å—ã —Å—Ç—Ä–æ–∫ –Ω–∞ <br>
    text = text.replace('\n', '<br>')
    
    # –ó–∞–º–µ–Ω—è–µ–º –¥–≤–æ–π–Ω—ã–µ –ø—Ä–æ–±–µ–ª—ã
    text = text.replace('  ', '&nbsp;&nbsp;')
    
    return text

def get_platform_icon(platform):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –∏–∫–æ–Ω–∫–∏ –¥–ª—è –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã –∑–Ω–∞–∫–æ–º—Å—Ç–≤"""
    icons = {
        'Tinder': 'fab fa-tinder',
        'Bumble': 'fas fa-bee',
        'Instagram': 'fab fa-instagram',
        'VK': 'fab fa-vk',
        'Telegram': 'fab fa-telegram',
        'WhatsApp': 'fab fa-whatsapp',
        'Facebook': 'fab fa-facebook',
        'Badoo': 'fas fa-heart',
        '–î—Ä—É–≥–æ–µ': 'fas fa-comments'
    }
    
    return icons.get(platform, 'fas fa-comments')

def get_personality_emoji(personality_type):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ —ç–º–æ–¥–∑–∏ –¥–ª—è —Ç–∏–ø–∞ –ª–∏—á–Ω–æ—Å—Ç–∏"""
    emojis = {
        '–≠–∫—Å—Ç—Ä–∞–≤–µ—Ä—Ç': 'üéâ',
        '–ò–Ω—Ç—Ä–æ–≤–µ—Ä—Ç': 'ü§î',
        '–ê–º–±–∏–≤–µ—Ä—Ç': 'ü§ù',
        '–ù–µ –∑–Ω–∞—é': '‚ùì'
    }
    
    return emojis.get(personality_type, 'üë§')

def get_goal_icon(dating_goal):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –∏–∫–æ–Ω–∫–∏ –¥–ª—è —Ü–µ–ª–µ–π –∑–Ω–∞–∫–æ–º—Å—Ç–≤"""
    icons = {
        '–°–µ—Ä—å–µ–∑–Ω—ã–µ –æ—Ç–Ω–æ—à–µ–Ω–∏—è': 'fas fa-ring',
        '–õ–µ–≥–∫–æ–µ –æ–±—â–µ–Ω–∏–µ': 'fas fa-coffee',
        '–î—Ä—É–∂–±–∞': 'fas fa-user-friends',
        '–ù–µ –æ–ø—Ä–µ–¥–µ–ª–∏–ª—Å—è': 'fas fa-question-circle'
    }
    
    return icons.get(dating_goal, 'fas fa-heart')
